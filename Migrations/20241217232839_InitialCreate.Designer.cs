// <auto-generated />
using System;
using CarenAll.data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarenAll.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241217232839_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarenAll.Models.DamageReport", b =>
                {
                    b.Property<int>("ReportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DriverID")
                        .HasColumnType("int");

                    b.Property<int>("ReporterID")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleID")
                        .HasColumnType("int");

                    b.HasKey("ReportID");

                    b.HasIndex("DriverID");

                    b.HasIndex("ReporterID");

                    b.HasIndex("VehicleID");

                    b.ToTable("DamageReports");
                });

            modelBuilder.Entity("CarenAll.Models.LeaseRequest", b =>
                {
                    b.Property<int>("RequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestID"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExpectedDistanceInKM")
                        .HasColumnType("int");

                    b.Property<string>("RequestReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RequestorCompanyID")
                        .HasColumnType("int");

                    b.Property<int>("RequestorID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleID")
                        .HasColumnType("int");

                    b.HasKey("RequestID");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("RequestorCompanyID");

                    b.HasIndex("RequestorID");

                    b.HasIndex("VehicleID");

                    b.ToTable("LeaseRequests");
                });

            modelBuilder.Entity("CarenAll.Models.Subscription", b =>
                {
                    b.Property<int>("SubcriptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubcriptionID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Upfront")
                        .HasColumnType("bit");

                    b.HasKey("SubcriptionID");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("CarenAll.Models.SubscriptionUpdate", b =>
                {
                    b.Property<int>("UpdateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UpdateID"));

                    b.Property<int?>("SubscriptionSubcriptionID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdatedByEmployeeID")
                        .HasColumnType("int");

                    b.HasKey("UpdateID");

                    b.HasIndex("SubscriptionSubcriptionID");

                    b.HasIndex("UpdatedByEmployeeID");

                    b.ToTable("SubscriptionUpdates");
                });

            modelBuilder.Entity("CarenAll.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("UserType").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("CarenAll.Models.Voertuigen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Aanschafjaar")
                        .HasColumnType("int");

                    b.Property<string>("Kenteken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kleur")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Merk")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VoertuigType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.HasKey("Id");

                    b.ToTable("Vehicles");

                    b.HasDiscriminator<string>("VoertuigType").HasValue("Voertuigen");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("CarenAll.Models.Company", b =>
                {
                    b.HasBaseType("CarenAll.Models.User");

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.Property<string>("Kvk")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SubscriptionID")
                        .HasColumnType("int");

                    b.HasIndex("SubscriptionID")
                        .IsUnique()
                        .HasFilter("[SubscriptionID] IS NOT NULL");

                    b.HasDiscriminator().HasValue("Company");
                });

            modelBuilder.Entity("CarenAll.Models.CompanyEmployee", b =>
                {
                    b.HasBaseType("CarenAll.Models.User");

                    b.Property<int>("CompanyEmployeeID")
                        .HasColumnType("int");

                    b.Property<int>("EmployerID")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("EmployerID");

                    b.ToTable("Users", t =>
                        {
                            t.Property("FirstName")
                                .HasColumnName("CompanyEmployee_FirstName");

                            t.Property("LastName")
                                .HasColumnName("CompanyEmployee_LastName");
                        });

                    b.HasDiscriminator().HasValue("CompanyEmployee");
                });

            modelBuilder.Entity("CarenAll.Models.Employee", b =>
                {
                    b.HasBaseType("CarenAll.Models.User");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Users", t =>
                        {
                            t.Property("FirstName")
                                .HasColumnName("Employee_FirstName");

                            t.Property("LastName")
                                .HasColumnName("Employee_LastName");
                        });

                    b.HasDiscriminator().HasValue("Employee");
                });

            modelBuilder.Entity("CarenAll.Models.PrivateClient", b =>
                {
                    b.HasBaseType("CarenAll.Models.User");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrivateClientID")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("PrivateClient");
                });

            modelBuilder.Entity("CarenAll.Models.Auto", b =>
                {
                    b.HasBaseType("CarenAll.Models.Voertuigen");

                    b.HasDiscriminator().HasValue("Auto");
                });

            modelBuilder.Entity("CarenAll.Models.Camper", b =>
                {
                    b.HasBaseType("CarenAll.Models.Voertuigen");

                    b.HasDiscriminator().HasValue("Camper");
                });

            modelBuilder.Entity("CarenAll.Models.Caravan", b =>
                {
                    b.HasBaseType("CarenAll.Models.Voertuigen");

                    b.HasDiscriminator().HasValue("Caravan");
                });

            modelBuilder.Entity("CarenAll.Models.DamageReport", b =>
                {
                    b.HasOne("CarenAll.Models.User", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarenAll.Models.Employee", "Reporter")
                        .WithMany()
                        .HasForeignKey("ReporterID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarenAll.Models.Voertuigen", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Reporter");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("CarenAll.Models.LeaseRequest", b =>
                {
                    b.HasOne("CarenAll.Models.Company", null)
                        .WithMany("LeaseRequests")
                        .HasForeignKey("CompanyId");

                    b.HasOne("CarenAll.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_LeaseRequest_Employee_EmployeeID");

                    b.HasOne("CarenAll.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("RequestorCompanyID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_LeaseRequest_Company_CompanyID");

                    b.HasOne("CarenAll.Models.User", "Requestor")
                        .WithMany()
                        .HasForeignKey("RequestorID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_LeaseRequest_Requestor_RequestorID");

                    b.HasOne("CarenAll.Models.Voertuigen", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_LeaseRequest_Vehicle_VehicleID");

                    b.Navigation("Company");

                    b.Navigation("Employee");

                    b.Navigation("Requestor");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("CarenAll.Models.SubscriptionUpdate", b =>
                {
                    b.HasOne("CarenAll.Models.Subscription", null)
                        .WithMany("UpdateHistory")
                        .HasForeignKey("SubscriptionSubcriptionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CarenAll.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("UpdatedByEmployeeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CarenAll.Models.Company", b =>
                {
                    b.HasOne("CarenAll.Models.Subscription", "Subscription")
                        .WithOne()
                        .HasForeignKey("CarenAll.Models.Company", "SubscriptionID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("CarenAll.Models.CompanyEmployee", b =>
                {
                    b.HasOne("CarenAll.Models.Company", "Company")
                        .WithMany("CompanyEmployees")
                        .HasForeignKey("EmployerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Company_CompanyEmployees");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("CarenAll.Models.Subscription", b =>
                {
                    b.Navigation("UpdateHistory");
                });

            modelBuilder.Entity("CarenAll.Models.Company", b =>
                {
                    b.Navigation("CompanyEmployees");

                    b.Navigation("LeaseRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
